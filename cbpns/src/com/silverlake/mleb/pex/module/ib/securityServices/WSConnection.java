
package com.silverlake.mleb.pex.module.ib.securityServices;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.xml.namespace.QName;

import org.apache.cxf.binding.soap.saaj.SAAJOutInterceptor;
import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.endpoint.Endpoint;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.handler.WSHandlerConstants;

import com.fuzion.ws.security.endpoint.SecurityEndpointService;
import com.fuzion.ws.security.endpoint.SecurityService;
import com.silverlake.hlb.mib.constant.MiBConstant;
import com.silverlake.mleb.pex.util.ClientPasswordCallback;
import com.silverlake.mleb.pex.util.PropertiesManager;

/**
 * This class was generated by Apache CXF 2.5.2
 * 2012-04-18T16:14:26.843+08:00
 * Generated source version: 2.5.2
 * 
 */
public class WSConnection {

	private static final QName SERVICE_NAME = new QName("http://endpoint.security.ws.fuzion.com/", "SecurityEndpointService");
	private PropertiesManager pmgr = new PropertiesManager();
    public WSConnection() {
    }
    
    private URL wsdlURL = SecurityEndpointService.WSDL_LOCATION;
    public SecurityService getServicePort() throws Exception
    {
    	SecurityEndpointService ss = null;
    	SecurityService port = null;
    	URL constantURL  = null;
    	
    	
    		constantURL = new URL(pmgr.getProperty("fuzion.ws.url")+"/SecurityService"+"?wsdl");
    	
		
    	ss = new SecurityEndpointService(constantURL, SERVICE_NAME);
		
		port = ss.getSecurityServicePort();            
		Object clientx = ClientProxy.getClient(port);
		Client client = (Client) clientx;
		HTTPConduit httpConduit = (HTTPConduit)client.getConduit();
		HTTPClientPolicy policy = httpConduit.getClient();
		// set time to wait for response in milliseconds. zero means unlimited
		policy.setReceiveTimeout(MiBConstant.REQUEST_TIMEOUT);
		policy.setConnectionTimeout(MiBConstant.CONNECT_TIMEOUT);
		

		if (pmgr.getProperty("fuzion.ws.url").toLowerCase().startsWith("https:")) {
		
			
	        TrustManager[] simpleTrustManager = new TrustManager[] { new X509TrustManager() {
	            public void checkClientTrusted(
	                    java.security.cert.X509Certificate[] certs, String authType) {
	            }

	            public void checkServerTrusted(
	                    java.security.cert.X509Certificate[] certs, String authType) {
	            }
	            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
	                return null;
	            }
	        } };
	        TLSClientParameters tlsParams = new TLSClientParameters();
	        tlsParams.setTrustManagers(simpleTrustManager);
	        tlsParams.setDisableCNCheck(true);
	        httpConduit.setTlsClientParameters(tlsParams);
	    }
		
		
		
		Client wsclient = ClientProxy.getClient(port);
        Endpoint cxfEndpoint = wsclient.getEndpoint();
        Map<String, Object> outProps = new HashMap<String, Object>();
        
        outProps.put("action", "UsernameToken");
        outProps.put("user",  pmgr.getProperty("fuzion.ws.username"));
        outProps.put("passwordType", "PasswordText");
        outProps.put(WSHandlerConstants.PW_CALLBACK_CLASS, ClientPasswordCallback.class.getName());
        WSS4JOutInterceptor wssOut = new WSS4JOutInterceptor(outProps);
       
        cxfEndpoint.getOutInterceptors().add(wssOut);
        cxfEndpoint.getOutInterceptors().add(new SAAJOutInterceptor());
        return port;
    }
    
  

}
